heat_template_version: 2015-10-15

description: >

parameters:
                   #                                            #
                   #                                            #
                   #           P A R A M E T E R E S            #
                   #                                            #
                   #                                            #

# NETWORK
 private_network_subnet:
  type: string
  description: ID of public network for which floating IP addresses will be allocated
  default: "192.168.2.0/24"

 private_network_dns_server:
  type: string
  description: test
  default: ["8.8.8.8", "4.2.2.4"]

# INSTANCES

 key_name:
  type: string
  description: Pair key name
  default: cs-datacahing

 keyvalue_flavor:
  type: string
  description: flavor for master node
  default: kvm.m1.small


 manager_flavor:
  type: string
  description: flavor for master node
  default: kvm.m1.medium

 client_flavor:
  type: string
  description: flavor for client nodes
  default : kvm.m2.medium

 image_id:
  type: string
  description: image which would used for nodes
  default: e9cf0016-07c1-43e6-ac8a-8a034f0e7755

 private_subnet_id:
  type: string
  description: ID of private sub network into which servers get deployed
  default: 7c1650ef-5227-4917-9990-0a1de98cd506

 number_of_node:
  type: string
  description: number of client node which would join to the cluster
  default: 2

## R E S O U R C E S
resources:

 internal_net:
  type: OS::Neutron::Net

 internal_subnet:
  type: OS::Neutron::Subnet
  properties:
   network_id: { get_resource: internal_net }
   cidr: { get_param: private_network_subnet }
   dns_nameservers: {get_param: private_network_dns_server}
   ip_version: 4

 internal_router:
  type: OS::Neutron::Router
  properties:
   external_gateway_info: { network: public }

 internal_interface:
  type: OS::Neutron::RouterInterface
  properties:
   router_id: { get_resource: internal_router }
   subnet: { get_resource: internal_subnet }

 manager_config_wait_handle:
  type: AWS::CloudFormation::WaitConditionHandle

 manager_config_wait_condition:
  type: AWS::CloudFormation::WaitCondition
  properties:
   Handle:
    get_resource: manager_config_wait_handle
   Timeout: 1000


 node_wait_handle:
  type: AWS::CloudFormation::WaitConditionHandle

 node_wait_condition:
  type: AWS::CloudFormation::WaitCondition
  depends_on: Clients
  properties:
   Handle:
    get_resource: node_wait_handle
   Timeout: 1000


 heat_param:
  type: OS::Heat::SoftwareConfig
  properties:
   group: system
   config:
    str_replace:
     template: { get_file: heat_asset/heat_param.yaml }
     params:
      $WAIT_HANDLE: {get_resource: node_wait_handle }

 enable_login:
  type: OS::Heat::SoftwareConfig
  properties:
   group: system
   config:
    str_replace:
     template: { get_file: heat_asset/enable_login.yaml }
     params:
      $empty: ""

 docker_src:
  type: OS::Heat::SoftwareConfig
  properties:
   group: ungrouped
   config: |
    #!/bin/bash -v
    mkdir /usr/src/cs-benchmark
    /usr/bin/curl -o /usr/src/cs-benchmark/install-docker.sh  http://msahihi.com/docker_setup.sh
    chmod +x /usr/src/cs-benchmark/install-docker.sh

 cfn_signal:
  type: OS::Heat::SoftwareConfig
  properties:
   group: ungrouped
   config: {get_file: heat_asset/signal.sh}

 keyvalue_config:
  type: OS::Heat::SoftwareConfig
  properties:
   group: ungrouped
   config:
    str_replace:
     template: |
      #!/bin/bash -v
      /usr/src/cs-benchmark/install-docker.sh -r keystore >>  /var/log/docker-setup.log
     params:
      $empty: " "

 manager_config:
  type: OS::Heat::SoftwareConfig
  depends_on: KeyValue
  properties:
   group: ungrouped
   config:
    str_replace:
     template: |
      #!/bin/bash -v
      wget http://msahihi.com/benchmark.tar.gz
      tar -xvf benchmark.tar.gz -C /usr/src/cs-benchmark/
      chmod -R 777 /usr/src/cs-benchmark/
      cd /usr/src/cs-benchmark/
      ./install-docker.sh -r manager -k $keyvalue_internal_ip >>  /var/log/docker-setup.log
     params:
      $keyvalue_internal_ip: { get_attr: [ KeyValue, first_address ] }

 client_config:
  type: OS::Heat::SoftwareConfig
  depends_on: manager_config_wait_condition
  properties:
   group: ungrouped
   config:
    str_replace:
     template: |
      #!/bin/bash -v
      /usr/src/cs-benchmark/install-docker.sh -r client -k $keyvalue_internal_ip >>  /var/log/docker-setup.log
     params:
      $keyvalue_internal_ip: { get_attr: [ KeyValue, first_address ] }


 keyvalue_node_init:
  type: OS::Heat::MultipartMime
  properties:
    parts:
    # - config: { get_resource: kv_param }
     - config: { get_resource: docker_src }
     - config: { get_resource: keyvalue_config }
    # - config: { get_resource: cfn_signal }

 manager_node_init:
  type: OS::Heat::MultipartMime
  properties:
    parts:
     - config: { get_resource: heat_param }
     - config: { get_resource: docker_src }
     - config: { get_resource: manager_config }
     - config:
         str_replace:
           template: |
            #!/bin/bash -v
            curl -sf -X PUT -H 'Content-Type: application/json' \
            --data-binary '{"Status": "SUCCESS","Reason": "Setup complete","Data": "OK", "UniqueId": "00000"}' \
            "$WAIT_HANDLE"
           params:
             $WAIT_HANDLE: {get_resource: manager_config_wait_handle }

 client_node_init:
  type: OS::Heat::MultipartMime
  properties:
    parts:
     - config: { get_resource: enable_login }
     - config: { get_resource: heat_param }
     - config: { get_resource: docker_src }
     - config: { get_resource: client_config }
     - config: { get_resource: cfn_signal }


 KeyValue:
  type: OS::Nova::Server
  properties:
   image: { get_param: image_id }
   flavor: { get_param: keyvalue_flavor }
   key_name: { get_param: key_name }
   networks:
    - network: {get_resource: internal_net}
   user_data_format: RAW
   user_data: { get_resource: keyvalue_node_init  }


 Manager:
  type: OS::Nova::Server
  properties:
   image: { get_param: image_id }
   flavor: { get_param: manager_flavor }
   key_name: { get_param: key_name }
   networks:
     - port: { get_resource: manager_port }
   user_data_format: RAW
   user_data: { get_resource: manager_node_init  }

 Clients:
  type: OS::Heat::ResourceGroup
  properties:
   count: { get_param: number_of_node }
   resource_def:
    type: OS::Nova::Server
    properties:
     image: { get_param: image_id }
     flavor: { get_param: client_flavor }
     key_name: { get_param: key_name }
     networks:
       - network: {get_resource: internal_net}
     user_data_format: RAW
     user_data: { get_resource: client_node_init  }


 manager_port:
  type: OS::Neutron::Port
  properties:
   network_id: { get_resource: internal_net }
   fixed_ips:
       - subnet_id: { get_resource: internal_subnet }

 manager_floating_ip:
  type: OS::Neutron::FloatingIP
  properties:
   floating_network_id: public
   port_id: { get_resource: manager_port }

                   #                                            #
                   #                                            #
                   #       T E M P L A T E   O U T P U T        #
                   #                                            #
                   #                                            #

outputs:

 Manager_Public_ip:
  value: { get_attr: [manager_floating_ip, floating_ip_address] }
