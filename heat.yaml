heat_template_version: 2015-10-15

description: >
    This template will take care of automated integration benchmark for CloudSuite Data Caching from Cloudsuite.
    The template create clustered Docker Swarm and run the benchmark over the clustered network.

parameters:
 key_name:
  type: string
  description: Name of a KeyPair
  default: msahihi

 instance_type:
  type: string
  default: kvm.m1.small
  description: Instance type for WordPress server
 image_id:
  type: string
  description: ID of the image to use
  default: e9cf0016-07c1-43e6-ac8a-8a034f0e7755

 private_net_id:
  type: string
  description: Neutron Network ID for the server
  default: 966c2fd7-c297-4ea7-ba45-b4e202ee19ff

 public_net_id:
  type: string
  description: >
      ID of public network for which floating IP addresses will be allocated
  default: 8b12c6f7-b3c4-4437-b6a0-0244c4c69f05

 private_subnet_id:
  type: string
  description: ID of private sub network into which servers get deployed
  default: 7c1650ef-5227-4917-9990-0a1de98cd506

 number_of_node:
  type: string
  description: number of client node which would join to the cluster
  default: 1


                   #                                            #
                   #                                            #
                   #    D E F I N I N G   R E S O U R C E S     #
                   #                                            #
                   #                                            #

resources:
 KeyValue:
  type: OS::Nova::Server
  properties:
   image: { get_param: image_id }
   flavor: { get_param: instance_type }
   key_name: { get_param: key_name }
   networks:
       - port: { get_resource: keyvalue_port }
   user_data:
       str_replace:
           template: |
               #!/bin/bash -v
               mkdir /usr/src/cs-benchmark
               /usr/bin/curl -o /usr/src/cs-benchmark/install-docker.sh http://msahihi.com/docker.sh
               chmod +x /usr/src/cs-benchmark/install-docker.sh
               /usr/src/cs-benchmark/install-docker.sh -r keystore > /var/log/docker-setup.log
               curl -X PUT -H 'Content-Type:application/json' \
                    -d '{"Status" : "SUCCESS","Reason" : "Configuration OK","UniqueId" : "SERVICE1","Data" : "Service1 Configured."}' \
                    "$wait_handle$"
           params:
               $wait_handle$:
                 get_resource: service1_wait_handle

 service1_wait:
  type: AWS::CloudFormation::WaitCondition
  depends_on: KeyValue
  properties:
   Handle:
    get_resource: service1_wait_handle
   Timeout: 1000

 service1_wait_handle:
  type: AWS::CloudFormation::WaitConditionHandle


 Manager:
  type: OS::Nova::Server
  depends_on: service1_wait
  properties:
   image: { get_param: image_id }
   flavor: { get_param: instance_type }
   key_name: { get_param: key_name }
   networks:
       - port: { get_resource: manager_port }
   user_data:
       str_replace:
           template: |
               #!/bin/bash -v
               mkdir /usr/src/cs-benchmark
               /usr/bin/curl -o /usr/src/cs-benchmark/install-docker.sh http://msahihi.com/docker.sh
               /usr/bin/curl -o  /usr/src/cs-benchmark/benchmark.tar.gz http://msahihi.com/benchmark.tar.gz
               tar -xvf /usr/src/cs-benchmark/benchmark.tar.gz -C /usr/src/cs-benchmark/
               chmod 777 /usr/src/cs-benchmark/*
               /usr/src/cs-benchmark/install-docker.sh -r manager -k "$keyvaluesrv"  > /var/log/docker-setup.log
           params:
               $role: ""
               $keyvaluesrv: { get_attr: [ KeyValue, first_address ] }


 Client:
    type: OS::Heat::ResourceGroup
    depends_on: service1_wait
    properties:
        count: {get_param: number_of_node}
        resource_def:
          type: OS::Nova::Server
          properties:
            image: { get_param: image_id }
            flavor: { get_param: instance_type }
            key_name: { get_param: key_name }
            networks:
                - port: { get_resource: client_port }
            user_data:
                str_replace:
                    template: |
                        #!/bin/bash -v
                        mkdir /usr/src/cs-benchmark
                        /usr/bin/curl -o /usr/src/cs-benchmark/install-docker.sh http://msahihi.com/docker.sh
                        chmod +x /usr/src/cs-benchmark/install-docker.sh
                        /usr/src/cs-benchmark/install-docker.sh -r client -k "$keyvaluesrv"  > /var/log/docker-setup.log
                    params:
                        $role: ""
                        $keyvaluesrv: { get_attr: [ KeyValue, first_address ] }


                   #                                            #
                   #                                            #
                   #   F L O A T I N G   I P   A D D R E S S    #
                   #                                            #
                   #                                            #



 keyvalue_port:
  type: OS::Neutron::Port
  properties:
   network_id: { get_param: private_net_id }
   fixed_ips:
       - subnet_id: { get_param: private_subnet_id }

 keyvalue_floating_ip:
  type: OS::Neutron::FloatingIP
  properties:
   floating_network_id: { get_param: public_net_id }
   port_id: { get_resource: keyvalue_port }

 manager_port:
  type: OS::Neutron::Port
  properties:
   network_id: { get_param: private_net_id }
   fixed_ips:
       - subnet_id: { get_param: private_subnet_id }

 manager_floating_ip:
  type: OS::Neutron::FloatingIP
  properties:
   floating_network_id: { get_param: public_net_id }
   port_id: { get_resource: manager_port }

 client_port:
  type: OS::Neutron::Port
  properties:
   network_id: { get_param: private_net_id }
   fixed_ips:
       - subnet_id: { get_param: private_subnet_id }

 client_floating_ip:
  type: OS::Neutron::FloatingIP
  properties:
   floating_network_id: { get_param: public_net_id }
   port_id: { get_resource: client_port }

                   #                                            #
                   #                                            #
                   #       T E M P L A T E   O U T P U T        #
                   #                                            #
                   #                                            #

outputs:

 KeyValue_name:
  description: Name of the instance
  value: { get_attr: [KeyValue, name] }

 KeyValue_Public_ip:
  description: Public IP address of the instance
  value: { get_attr: [keyvalue_floating_ip, floating_ip_address] }

 KeyValue_Private_ip:
  description: Private IP address of the instance
  value: { get_attr: [KeyValue, first_address] }


 Manager_name:
  description: Name of the instance
  value: { get_attr: [Manager, name] }

 Manager_Public_ip:
  description: Public IP address of the instance
  value: { get_attr: [manager_floating_ip, floating_ip_address] }

 Server_Private_ip:
  description: Private IP address of the instance
  value: { get_attr: [Manager, first_address] }


 Client_name:
  description: Name of the instance
  value: { get_attr: [Client, name] }

 Client_Public_ip:
  description: Public IP address of the instance
  value: { get_attr: [client_floating_ip, floating_ip_address] }

 Client_Private_ip:
  description: Private IP address of the instance
  value: { get_attr: [Client, first_address] }
